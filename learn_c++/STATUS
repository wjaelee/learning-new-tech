------------------------------------------------
Lesson 1: namespace

namespace is a collection of names that help programmers avoid name conflicts.
Especially, as number of functions increase in the codebase, there may be functions
with the same name. Namespace helps us figure out which function we are referring to.
------------------------------------------------

------------------------------------------------
Lesson 2: reference
int a = 5;
int& another_a = a;

difference between reference and pointer
- reference must be initialized
- once reference is assigned, cannot be changed. On the other hand, pointer can be reassigned to point to different var.
- reference does not exist on memory, it is simply an alias of other var. (except for reference in the argument)
- there can't be array of references, references to references, pointers to references

why use reference instead of pointer?
- no need for unnecessary & and *
------------------------------------------------

------------------------------------------------
Lesson 3: function overloading

The steps C++ compiler takes to find the overloaded function
1. Find function that exactly matches the type of arguments
2. If there is no exact match, check if there is function that matches
after type conversion (casting)
- char, unsigned char, short => int
- unsigned short => int or unsigned int
- float => double
- enum => int
3. Try even more general type conversion to find the function
- number type => number type
- 0 => pointer type or number type
- pointer => void pointer
4. Try user defined type conversion
------------------------------------------------

------------------------------------------------
Lesson 4: Class
class Date {
  int year_;
  int month_;  // 1 부터 12 까지.
  int day_;    // 1 부터 31 까지.

 public:
  void SetDate(int year, int month, int date);
  void AddDay(int inc);
  void AddMonth(int inc);
  void AddYear(int inc);

  // 해당 월의 총 일 수를 구한다.
  int GetCurrentMonthTotalDays(int year, int month);

  void ShowDate();
};

void Date::SetDate(int year, int month, int day) {
  year_ = year;
  month_ = month;
  day_ = day;
}

Why define function outside of class declaration?
- avoid class being too long
- but in the exception of template class, everything is defined within template class
------------------------------------------------

------------------------------------------------
Lesson 5: constructor, copy constructor, destructor

Date(int year, int month, int day) {
  year_ = year;
  month_ = month;
  day_ = day;
}

Ways to initalize instance
Date day(2011, 3, 1);  // implicit       <= preferred
Date day = Date(2012, 3, 1); // explicit

class Test {
 public:
  Test() = default;  // 디폴트 생성자를 정의해라
};

difference between new and malloc
- new not only allocates memory in heap but also calls constructor

destructor

~Marine();
Marine::~Marine() {
  if (name != NULL) {
    delete[] name;
  }
}

copy constructor
T(const T& a);

Photon_Cannon(const Photon_Cannon& pc);

Photon_Cannon::Photon_Cannon(const Photon_Cannon& pc) {
  hp = pc.hp;
  shield = pc.shield;
  coord_x = pc.coord_x;
  coord_y = pc.coord_y;
  damage = pc.damage;
}

Photon_Cannon pc1(3, 3); // constructor
Photon_Cannon pc2(pc1); // copy constructor
Photon_Cannon pc3 = pc2; // copy constructor
pc3 = pc2; // nothing

default copy constructor makes a shallow copy.
If we have member field that is dynamically allocated,
we need to define our own copy constructor to make a deep copy.
------------------------------------------------

------------------------------------------------
Lesson 6: initialize list, static member variable

Marine::Marine() : hp(50), coord_x(0), coord_y(0), damage(5), is_dead(false) {}

constructor : var1(arg1), var2(arg2), ... {}

Why use initializer list as opposed to normal constructor?
- initializer list simultaneously construct and initialize
- without initializer list, construct and then assign
- if class has member fields that are either constant or reference, initializer list must be used 
to initialize them

e.g.
using initializer list:
int a = 10;
not using initializer list:
int a;
a = 10;

static member variable belongs to a class, not to a specific instance, and gets destroyed when the program ends.
All instances of the class share a single static member variable.

static function

Usually variables are local and get destroyed when going out of scope.
But static variable does not get destroyed even after going out of scope. 
Moreover static variable gets initialized only once.
It gets stored in the Data segment and gets destroyed when the program ends.
------------------------------------------------

------------------------------------------------
T f() const {
  ...
  return something
}
=> this function does not change values of other vars, can only read
------------------------------------------------

------------------------------------------------
Exercise: Make my own string class
------------------------------------------------

------------------------------------------------
Lesson: Implicit/Explicit conversion, mutable

void DoSomethingWithString(MyString s);
DoSomethingWithString("abc")
This line 172 implicity converts "abc" to MyString instance
because MyString class has a constructor
MyString(const char* str);

However, this can be problem when
DoSomethingWithString(3)
This also runs due to
// capacity 만큼 미리 할당함.
MyString(int capacity);

To prevent this, we declare capacity constructor as explicit like the following.

class MyString {
  char* string_content;  // 문자열 데이터를 가리키는 포인터
  int string_length;     // 문자열 길이

  int memory_capacity;

 public:
  // capacity 만큼 미리 할당함. (explicit 키워드에 주목)
  explicit MyString(int capacity);
  ...
}

MyString s = "abc";  // MyString s("abc")
MyString s = 5;      // MyString s(5), doesn't work

if a member variable is declared as mutable,
even const function can change its value

#include <iostream>

class A {
  mutable int data_;

 public:
  A(int data) : data_(data) {}
  void DoSomething(int x) const {
    data_ = x;  // 가능!
  }

  void PrintData() const { std::cout << "data: " << data_ << std::endl; }
};

int main() {
  A a(10);
  a.DoSomething(3);
  a.PrintData();
}

So why do we need mutable in the first place?
1. in the case of cache. Usually const function do not change the internal state of instance.
However, depending on the situation, we might want to cahce the result. For example,

class Server {
  // .... (생략) ....

  Cache cache; // 캐쉬!
  mutable Cache mutable_cache;

  // 이 함수는 데이터베이스에서 user_id 에 해당하는 유저 정보를 읽어서 반환한다.
  User GetUserInfo(const int user_id) const {
    // 1. 캐쉬에서 user_id 를 검색
    Data user_data = cache.find(user_id);

    // 2. 하지만 캐쉬에 데이터가 없다면 데이터베이스에 요청
    if (!user_data) {
      user_data = Database.find(user_id);

      // 그 후 캐쉬에 user_data 등록
      cache.update(user_id, user_data); // <-- 불가능
      mutable_cache.update(user_id, user_data); // <-- 가능 
    }

    // 3. 리턴된 정보로 User 객체 생성
    return User(user_data);
  }
};

------------------------------------------------


Questions
1. what is typedef and why do I need to use it?
2. what is enum? 
3. NULL vs nullptr

